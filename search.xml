<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dialog 中监听键盘弹出与收起事件</title>
      <link href="/posts/a5f0e43e.html"/>
      <url>/posts/a5f0e43e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近遇到了一个在 Dialog 中监听键盘弹出与收起事件的需求，经过查询资料再与自己的需求相结合然后思考，最终解决了问题。现将中间遇到的问题与解决办法记录下来。</p><a id="more"></a><h2 id="需求与效果"><a href="#需求与效果" class="headerlink" title="需求与效果"></a>需求与效果</h2><p><img src="/images/15650801798417/demo.gif" alt="demo"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>自定义 Dialog，通过设置 Dialog 的 “windowSoftInputMode” 配合监听 Dialog 所在 Window 的高度变化来判断键盘当前的状态。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/rootView"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"44dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@android:color/white"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/editText"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@null"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"点此参加讨论~"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLines</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingLeft</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingRight</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@android:color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"13sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/sendButton"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingLeft</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingRight</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"发送"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"@android:color/black"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"13sp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/15650801798417/15651693560512.jpg?360x" alt="-w246"></p><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Dialog"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Dialog"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:background"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSoftInputMode"</span>&gt;</span>adjustPan|stateVisible<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:backgroundDimEnabled"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDialog</span></span>(context: Context, <span class="keyword">private</span> <span class="keyword">val</span> callback: Callback) : Dialog(context, R.style.Dialog) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"MyDialog"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.mydioalog)</span><br><span class="line"></span><br><span class="line">        window?.attributes = window?.attributes?.apply &#123;</span><br><span class="line">            width = WindowManager.LayoutParams.MATCH_PARENT</span><br><span class="line">            <span class="comment">// 因为 adjustPan 在键盘弹出后布局高度大于屏幕上除键盘之外的可用区域的高度时才会起效，</span></span><br><span class="line">            <span class="comment">// 而我们监听的就是布局在键盘弹出与收起时可见区域的高度的变化，从而判断键盘当前的状态的。</span></span><br><span class="line">            <span class="comment">// 但是不同的手机屏幕高度不同，所以需要动态设置。</span></span><br><span class="line">            <span class="comment">// 可用高度 = 屏幕高度 - 状态栏高度</span></span><br><span class="line">            height = Resources.getSystem().displayMetrics.heightPixels - getStatusBarHeight()</span><br><span class="line">            gravity = Gravity.BOTTOM</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rootView.viewTreeObserver.addOnGlobalLayoutListener &#123;</span><br><span class="line">            <span class="keyword">val</span> decorView = window.decorView</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> visibleDisplayRect = Rect()</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检测当前视图所在的 Window 可见区域的大小</span></span><br><span class="line">            decorView.getWindowVisibleDisplayFrame(visibleDisplayRect)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> visibleHeight = decorView.height</span><br><span class="line"></span><br><span class="line">            Log.d(TAG, <span class="string">"visibleHeight <span class="variable">$visibleHeight</span>"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">when</span> &#123;</span><br><span class="line">                decorViewVisibleHeight == <span class="number">0</span> -&gt; &#123;</span><br><span class="line">                    <span class="comment">// do nothing</span></span><br><span class="line">                &#125;</span><br><span class="line">                decorViewVisibleHeight &gt; visibleDisplayRect.height() -&gt; callback.onKeyboardShow()</span><br><span class="line">                <span class="keyword">else</span> -&gt; callback.onKeyboardDismiss()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            decorViewVisibleHeight = visibleHeight</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取状态栏高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getStatusBarHeight</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> resourceId = Resources.getSystem().getIdentifier(</span><br><span class="line">            <span class="string">"status_bar_height"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            context.resources.getDimensionPixelSize(resourceId)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TypedValue.applyDimension(</span><br><span class="line">                TypedValue.COMPLEX_UNIT_DIP,</span><br><span class="line">                <span class="number">25f</span>,</span><br><span class="line">                Resources.getSystem().displayMetrics</span><br><span class="line">            ).toInt()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> decorViewVisibleHeight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 键盘弹出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onKeyboardShow</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 键盘收起</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onKeyboardDismiss</span><span class="params">()</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加显示-Dialog-的点击事件"><a href="#添加显示-Dialog-的点击事件" class="headerlink" title="添加显示 Dialog 的点击事件"></a>添加显示 Dialog 的点击事件</h3><p>在 Activity 中添加一个按钮，并为它添加点击事件如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener &#123;</span><br><span class="line">    MyDialog(<span class="keyword">this</span>, <span class="keyword">object</span> : MyDialog.Callback &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onKeyboardShow</span><span class="params">()</span></span> &#123;</span><br><span class="line">            textView.text = <span class="string">"键盘显示"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onKeyboardDismiss</span><span class="params">()</span></span> &#123;</span><br><span class="line">            textView.text = <span class="string">"键盘隐藏"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/15650801798417/edit_text_error.png?360x" alt="-w246"></p><p>此时已经可以监听到键盘的弹出与收起事件了，但是仔细看输入框会发现下半部分被键盘盖住了。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>经过研究发现这与 EditText 的 background 属性有关，先把 <code>android:background=&quot;@null&quot;</code> 去掉，效果如下：</p><p><img src="/images/15650801798417/edit_text_default.png?360x" alt="-w246"></p><p>那么 background 设置为 null 与默认值的差别在哪里呢？我们通过 EditText 的源码找一下答案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditText</span> <span class="keyword">extends</span> <span class="title">TextView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EditText</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EditText</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, com.android.internal.R.attr.editTextStyle);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码中可以看出 EditText 的默认 style 为 <code>com.android.internal.R.attr.editTextStyle</code>，接下来全局搜索看一下这个 style 的特征：</p><p><img src="/images/15650801798417/15651668502423.jpg" alt="-w810"></p><p>一路追踪 parent，最终发现顶级 parent 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Widget.EditText"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"background"</span>&gt;</span>?attr/editTextBackground<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再全局搜索 <code>editTextBackground</code> 关键字：</p><p><img src="/images/15650801798417/15651675938467.jpg" alt="-w810"></p><p>从图中可以看出有很多 item 的 name 是 <code>editTextBackground</code>，随便打开一个，这里就以图中选中的为例，打开文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">inset</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:insetLeft</span>=<span class="string">"@dimen/edit_text_inset_horizontal_material"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:insetRight</span>=<span class="string">"@dimen/edit_text_inset_horizontal_material"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:insetTop</span>=<span class="string">"@dimen/edit_text_inset_top_material"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:insetBottom</span>=<span class="string">"@dimen/edit_text_inset_bottom_material"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selector</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_enabled</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nine-patch</span> <span class="attr">android:src</span>=<span class="string">"@drawable/textfield_default_mtrl_alpha"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:tint</span>=<span class="string">"?attr/colorControlNormal"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"false"</span> <span class="attr">android:state_focused</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nine-patch</span> <span class="attr">android:src</span>=<span class="string">"@drawable/textfield_default_mtrl_alpha"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:tint</span>=<span class="string">"?attr/colorControlNormal"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">nine-patch</span> <span class="attr">android:src</span>=<span class="string">"@drawable/textfield_activated_mtrl_alpha"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:tint</span>=<span class="string">"?attr/colorControlActivated"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">inset</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到是通过 xml 设置了一个 InsetDrawable，这里效果如同给 EditText 设置 padding。所以我们给 EditText 添加 paddingTop 和 paddingBottom，运行后发现效果 OK。</p><h2 id="使用-FragmentDialog-注意"><a href="#使用-FragmentDialog-注意" class="headerlink" title="使用 FragmentDialog 注意"></a>使用 FragmentDialog 注意</h2><p>因为 FragmentDialog 是一个 Fragment，所以既可以通过 <code>getActivity().getWindow()</code> 也可以使用 <code>dialog.getWindow()</code>，但是要注意这里应该使用 <code>dialog.getWindow()</code>，反之将不会有预期效果。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Dialog </tag>
            
            <tag> 键盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客进化史</title>
      <link href="/posts/61f01eb0.html"/>
      <url>/posts/61f01eb0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>个人博客是一个不断进化的过程，在这里记录下博客优化的点点滴滴。</p><a id="more"></a>    <div id="aplayer-TbPTPmzQ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="108138" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><h2 id="2019年08月07日"><a href="#2019年08月07日" class="headerlink" title="2019年08月07日"></a>2019年08月07日</h2><ul><li>使用 <a href="https://github.com/CodeXiaoMai/hexo_resize_image.js" rel="external nofollow noopener noreferrer" target="_blank">hexo_resize_image</a> 支持在 markdown 中设置图片大小。</li></ul><h2 id="2019年08月05日"><a href="#2019年08月05日" class="headerlink" title="2019年08月05日"></a>2019年08月05日</h2><ul><li>文章链接使用 <a href="https://github.com/rozbo/hexo-abbrlink" rel="external nofollow noopener noreferrer" target="_blank">hexo-abbrlink</a> 支持文章 Id。</li><li>使用 <a href="https://github.com/MoePlayer/hexo-tag-aplayer" rel="external nofollow noopener noreferrer" target="_blank">hexo-tag-aplayer</a> 支持背景音乐。</li></ul><h2 id="2019年08月01日"><a href="#2019年08月01日" class="headerlink" title="2019年08月01日"></a>2019年08月01日</h2><ul><li>SEO 优化</li><li>使用 <a href="https://github.com/hexojs/hexo-generator-sitemap" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-sitemap</a> 和 <a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-baidu-sitemap</a> 生成站点地图</li><li>使用 <a href="https://github.com/theme-next/hexo-symbols-count-time" rel="external nofollow noopener noreferrer" target="_blank">hexo-symbols-count-time</a> 支持字数统计</li><li>使用 <a href="https://github.com/theme-next/hexo-generator-searchdb" rel="external nofollow noopener noreferrer" target="_blank">hexo-generator-searchdb</a> 支持站内搜索</li></ul><h2 id="2019年05月28日"><a href="#2019年05月28日" class="headerlink" title="2019年05月28日"></a>2019年05月28日</h2><ul><li>开始使用 Hexo 搭建个人博客。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>字符编码的历史演变</title>
      <link href="/posts/a082b9c.html"/>
      <url>/posts/a082b9c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制 11111111 = 十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是65535，4个字节可以表示的最大整数是4294967295。</p><a id="more"></a><h2 id="ASCII-编码的诞生"><a href="#ASCII-编码的诞生" class="headerlink" title="ASCII 编码的诞生"></a>ASCII 编码的诞生</h2><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为 ASCII 编码，比如大写字母 A 的编码是65，小写字母 z 的编码是122。</p><p>但是要处理中文，显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了 GB2312 编码，用来把中文编进去。</p><h2 id="八仙过海，各显神通"><a href="#八仙过海，各显神通" class="headerlink" title="八仙过海，各显神通"></a>八仙过海，各显神通</h2><p>但全世界有上百种语言，日本把日文编到 Shift_JIS 里，韩国把韩文编到Euc-kr 里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p><h2 id="Unicode-为统一而生"><a href="#Unicode-为统一而生" class="headerlink" title="Unicode 为统一而生"></a>Unicode 为统一而生</h2><p>为了避免各国之间的编码冲突，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p><p>Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p><p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p><h2 id="UTF-8-来优化-Unicode"><a href="#UTF-8-来优化-Unicode" class="headerlink" title="UTF-8 来优化 Unicode"></a>UTF-8 来优化 Unicode</h2><p>本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p><table><thead><tr><th align="center">字符</th><th align="center">ASCII</th><th align="center">Unicode</th><th align="center">UTF-8</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">01000001</td><td align="center">00000000 01000001</td><td align="center">01000001</td></tr><tr><td align="center">中</td><td align="center">x</td><td align="center">01001110 00101101</td><td align="center">11100100 10111000 10101101</td></tr></tbody></table><p>从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分。</p><p>如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：</p><p>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。</p><p>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000" rel="external nofollow noopener noreferrer" target="_blank">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000</a></p><h2 id="开源工具推广"><a href="#开源工具推广" class="headerlink" title="开源工具推广"></a>开源工具推广</h2><p>你还在为开发中频繁切换环境打包而烦恼吗？快来试试 Environment Switcher 吧！使用它可以在app运行时一键切换环境，而且还支持其他贴心小功能，有了它妈妈再也不用担心频繁环境切换了。<a href="https://github.com/CodeXiaoMai/EnvironmentSwitcher" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/CodeXiaoMai/EnvironmentSwitcher</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EnvironmentSwitcher</title>
      <link href="/posts/1d56b016.html"/>
      <url>/posts/1d56b016.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://github.com/CodeXiaoMai/EnvironmentSwitcher" rel="external nofollow noopener noreferrer" target="_blank">Environment Switcher</a> 是一个在 Android 的开发和测试阶段，运用 Java 注解、APT、反射、混淆等原理来一键切换环境的工具。</p><p>目前该项目已经达成如下成就：<br><a href="https://github.com/CodeXiaoMai/EnvironmentSwitcher/stargazers" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/github/stars/CodeXiaoMai/EnvironmentSwitcher.svg" alt="GitHub stars"></a><a href="https://github.com/CodeXiaoMai/EnvironmentSwitcher/network" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/github/forks/CodeXiaoMai/EnvironmentSwitcher.svg" alt="GitHub forks"></a><a href="https://github.com/CodeXiaoMai/EnvironmentSwitcher/watchers" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/github/watchers/CodeXiaoMai/EnvironmentSwitcher.svg" alt="GitHub watchers"></a></p><a id="more"></a><p>它具有以下特点：</p><ul><li>配置简单</li><li>安全，不泄漏测试环境地址</li><li>不用重新打包即可一键切换环境</li><li>支持按模块配置与切换环境</li><li>支持环境切换通知回调</li><li>自动生成 <code>切换</code> <code>保存</code> <code>获取</code> 环境的逻辑代码</li><li>与项目解耦</li><li>……</li></ul><h2 id="为什么不用-Gradle"><a href="#为什么不用-Gradle" class="headerlink" title="为什么不用 Gradle"></a>为什么不用 Gradle</h2><p>看到这里你可能会想，这些功能我用 Gradle 就能搞定了，为什么要用 Environment Switcher 呢？别着急，下面我们来比较一下 Environment Switcher 和 Gradle。</p><table><thead><tr><th align="center">比较内容</th><th align="center">Environment Switcher</th><th align="center">Gradle  Application Id 不同</th><th align="center">Gradle Application Id 相同</th></tr></thead><tbody><tr><td align="center">运行时切换环境</td><td align="center">✔️</td><td align="center">✖️</td><td align="center">✖️</td></tr><tr><td align="center">切换环境回调</td><td align="center">✔️</td><td align="center">✖️</td><td align="center">✖️</td></tr><tr><td align="center">切换环境逻辑</td><td align="center">自动生成</td><td align="center">需要自己实现</td><td align="center">需要自己实现</td></tr><tr><td align="center">n 套环境打包数量</td><td align="center">1个</td><td align="center">n个</td><td align="center">n个</td></tr><tr><td align="center">多套环境同时安装</td><td align="center">✔️</td><td align="center">✔️</td><td align="center">✖️</td></tr><tr><td align="center">支付等SDK包名校验</td><td align="center">✔️</td><td align="center">✖️</td><td align="center">✔️</td></tr><tr><td align="center">多模块环境配置</td><td align="center">✔️</td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">测试环境不泄露</td><td align="center">✔️</td><td align="center">✔️</td><td align="center">✔️</td></tr><tr><td align="center">……</td><td align="center">——</td><td align="center">——</td><td align="center">——</td></tr></tbody></table><p>这里就先列举这么多，仅 <code>运行时切换环境</code> 、<code>打包数量</code>、<code>切换环境回调</code> 这几个特点就比 Gradle 方便很多，而且 Environment Switcher 的接入成本也很低。是不是想试一试了？</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><table><thead><tr><th align="center">module</th><th align="center">environmentswitcher</th><th align="center">environmentswitcher-compiler</th><th align="center">environmentswitcher-compiler-release</th></tr></thead><tbody><tr><td align="center">version</td><td align="center"><a href="https://bintray.com/xiaomai/maven/environmentswitcher/_latestVersion" rel="external nofollow noopener noreferrer" target="_blank"> <img src="https://api.bintray.com/packages/xiaomai/maven/environmentswitcher/images/download.svg" alt="Download"> </a></td><td align="center"><a href="https://bintray.com/xiaomai/maven/environmentswitcher-compiler/_latestVersion" rel="external nofollow noopener noreferrer" target="_blank"> <img src="https://api.bintray.com/packages/xiaomai/maven/environmentswitcher-compiler/images/download.svg" alt="Download"> </a></td><td align="center"><a href="https://bintray.com/xiaomai/maven/environmentswitcher-compiler-release/_latestVersion" rel="external nofollow noopener noreferrer" target="_blank"> <img src="https://api.bintray.com/packages/xiaomai/maven/environmentswitcher-compiler-release/images/download.svg" alt="Download"> </a></td></tr></tbody></table><h3 id="配置项目的-build-gradle"><a href="#配置项目的-build-gradle" class="headerlink" title="配置项目的 build.gradle"></a>配置项目的 build.gradle</h3><h4 id="java-版"><a href="#java-版" class="headerlink" title="java 版"></a>java 版</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation &quot;com.xiaomai.environmentswitcher:environmentswitcher:$version&quot;</span><br><span class="line">    debugAnnotationProcessor &quot;com.xiaomai.environmentswitcher:environmentswitcher-compiler:$version&quot;</span><br><span class="line">    releaseAnnotationProcessor &quot;com.xiaomai.environmentswitcher:environmentswitcher-compiler-release:$version&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="kotlin-版"><a href="#kotlin-版" class="headerlink" title="kotlin 版"></a>kotlin 版</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;kotlin-kapt&apos;</span><br><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation &quot;com.xiaomai.environmentswitcher:environmentswitcher:$version&quot;</span><br><span class="line">    kaptDebug &quot;com.xiaomai.environmentswitcher:environmentswitcher-compiler:$version&quot;</span><br><span class="line">    kaptRelease &quot;com.xiaomai.environmentswitcher:environmentswitcher-compiler-release:$version&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写-EnvironmentConfig-文件"><a href="#编写-EnvironmentConfig-文件" class="headerlink" title="编写 EnvironmentConfig 文件"></a>编写 EnvironmentConfig 文件</h3><p><strong>这个类是 Environment Switcher 依赖的核心代码，所有获取、修改环境的逻辑代码都会依赖这个类中被 <code>@Module</code> 和 <code>@Environment</code> 两个注解标记的类和属性自动生成。</strong></p><blockquote><p>注意：如果你的项目中使用了 Kotlin，请使用 Java 语言编写 EnvironmentConfig，暂时还不支持使用 Kotlin 编写这个类。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 环境配置类&lt;/br&gt;</span><br><span class="line">  *</span><br><span class="line">  * ⚠ 建议不要引用该类中的任何子类和成员变量，一但引用了非正式环境的属性，打包时混淆工具就不会移除该类，导致测试地址泄漏。&lt;/br&gt;</span><br><span class="line">  * Environment Switcher 在编译 Release 版本时，会自动隐藏测试环境地址。&lt;/br&gt;&lt;/br&gt;</span><br><span class="line">  *</span><br><span class="line">  * 建议将该类中所有被 &#123;@link Module&#125; 和 &#123;@link Environment&#125; 修饰的类或成员变量用 private 修饰，&lt;/br&gt;</span><br><span class="line">  * Environment Switcher 会在编译期间自动生成相应的 Module_XX 和 Environment_XX 静态常量。&lt;/br&gt;</span><br><span class="line">  * 例如：通过 EnvironmentSwitcher.MODULE_APP 就可以获取到 App 模块下相应的所有环境&lt;/br&gt;</span><br><span class="line">  */</span><br><span class="line">public class EnvironmentConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">      * 整个 App 的环境</span><br><span class="line">      */</span><br><span class="line">    @Module</span><br><span class="line">    private class App &#123;</span><br><span class="line">        @Environment(url = &quot;https://gank.io/api/&quot;, isRelease = true, alias = &quot;正式&quot;)</span><br><span class="line">        private String online;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">      * 特殊模块 Music 的环境</span><br><span class="line">      */</span><br><span class="line">    @Module(alias = &quot;音乐&quot;)</span><br><span class="line">    private class Music &#123;</span><br><span class="line">        @Environment(url = &quot;https://www.codexiaomai.top/api/&quot;, isRelease = true, alias = &quot;正式&quot;)</span><br><span class="line">        private String online;</span><br><span class="line">    </span><br><span class="line">        @Environment(url = &quot;http://test.codexiaomai.top/api/&quot;, alias = &quot;测试&quot;)</span><br><span class="line">        private String test;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">      * 特殊模块 News 的环境</span><br><span class="line">      */</span><br><span class="line">    @Module(alias = &quot;新闻&quot;)</span><br><span class="line">    private class News &#123;</span><br><span class="line">        @Environment(url = &quot;http://news/release/&quot;, isRelease = true, alias = &quot;正式&quot;)</span><br><span class="line">        private String release;</span><br><span class="line">    </span><br><span class="line">        @Environment(url = &quot;http://news/test/&quot;, alias = &quot;测试&quot;)</span><br><span class="line">        private String test;</span><br><span class="line">    </span><br><span class="line">        @Environment(url = &quot;http://news/test1/&quot;)</span><br><span class="line">        private String test1;</span><br><span class="line">    </span><br><span class="line">        @Environment(url = &quot;http://news/sandbox/&quot;, alias = &quot;沙箱&quot;)</span><br><span class="line">        private String sandbox;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Module"><a href="#Module" class="headerlink" title="@Module"></a>@Module</h4><p>被它修饰的类或接口表示一个模块，编译时会自动生成相应模块的 <code>getXXEnvironment()</code> 和 <code>setXXEnvironment()</code> 方法。一个被 <code>@Module</code> 修饰的类中，可以有 n (n&gt;0) 个被 <code>@Environment</code> 修饰的属性，表示该模块中有 n 种环境。</p><p>例如：上面的代码中，有三个类被 <code>@Module</code> 修饰，意味着有三个模块，其中 App 模块中，只有一个属性被 <code>@Environment</code> 修饰，表示该模块只有一种环境；而 Music 和 News 模块分别有 2 种和 4 种环境。</p><p>此外 <code>@Module</code> 还有一个可选属性 <code>alias</code> ，用来指定该模块的别名。该值默认为空字符串。这个属性的主要目的是在切换环境 UI 页面显示中文名称。例如：Music 和 News 模块在切换环境页面中就会分别显示 “音乐” 和 “新闻”。</p><blockquote><p>注：如果你的项目中所有模块共用同一个 Host 地址，那么只需配置一个 Module 就可以了。</p></blockquote><h4 id="Environment"><a href="#Environment" class="headerlink" title="@Environment"></a>@Environment</h4><p>被它修饰的属性表示一个环境，必须指定 <code>url</code> 的值，此外还有两个可选属性：<code>isRelease</code> 和 <code>alias</code>。</p><ul><li><p>isRelease 是一个 boolean 型的属性，默认为 false，当值为 true 时，它就是所在 Module 的默认环境，以及 App 正式发布时的环境。<strong>一个 Module 中必须有且只有一个 Environment 的 isRelease 的值为 true，否则编译会失败。</strong> </p><p>  例如：Music 模块中有两种环境分别是 online（正式）和 test （测试），因为 online 的 isRelease = true，所以它就是默认环境和App 正式发布时的环境。</p></li><li><p>alias 和 <code>@Module</code> 中的 alias 相似，用于在切换环境的UI页面展示该环境的名字，该值默认为空字符串，如果给它指定非空字符串，则环境的名字就被指定为 <code>alias</code> 的值。</p></li></ul><blockquote><p><font color="red"><strong>再次强调</strong>：一个 Module 中必须有且只有一个 Environment 的 isRelease 的值为 true，否则编译会失败</font>。 </p></blockquote><h3 id="点击菜单栏中的-“Build”-gt-“Rebuild-Project”，等待编译完成。"><a href="#点击菜单栏中的-“Build”-gt-“Rebuild-Project”，等待编译完成。" class="headerlink" title="点击菜单栏中的 “Build” -&gt; “Rebuild Project”，等待编译完成。"></a>点击菜单栏中的 “Build” -&gt; “Rebuild Project”，等待编译完成。</h3><p>到这里整个配置就算完成了，接下来就可以在项目中愉快的获取相应模块的环境地址了。</p><h3 id="添加入口"><a href="#添加入口" class="headerlink" title="添加入口"></a>添加入口</h3><p>手动切换环境当然要有一个页面，这个页面 Environment Switcher 已经自动集成了，只需要添加一个入口跳转即可（这个入口只在 Debug 测试等内部版显示）。</p><p>例如：在“我的”页面中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">...</span><br><span class="line">if (!BuildConfig.DEBUG) &#123;</span><br><span class="line">// only show in debug</span><br><span class="line">findViewById(R.id.bt_switch_environment).setVisibility(View.GONE);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">findViewById(R.id.bt_switch_environment).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void onClick(View view) &#123;</span><br><span class="line">// entrance of switch environment</span><br><span class="line">EnvironmentSwitchActivity.launch(getContext());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以使用 Environment Switcher 已经提供的 <code>EnvironmentSwitchActivity.launch(getContext())</code> 方法启动；当然你也可以通过 <code>startActivity(new Intent(getContext(), EnvironmentSwitchActivity.class))</code> 启动，看个人喜好了。</p><h3 id="获取相应模块的环境地址："><a href="#获取相应模块的环境地址：" class="headerlink" title="获取相应模块的环境地址："></a>获取相应模块的环境地址：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String appEnvironment = EnvironmentSwitcher.getAppEnvironment(this, BuildConfig.DEBUG);</span><br><span class="line">String musicEnvironment = EnvironmentSwitcher.getMusicEnvironment(this, BuildConfig.DEBUG);</span><br><span class="line">String newsEnvironment = EnvironmentSwitcher.getNewsEnvironment(this, BuildConfig.DEBUG);</span><br></pre></td></tr></table></figure><h3 id="获取相应模块的环境实体类-since-1-4-："><a href="#获取相应模块的环境实体类-since-1-4-：" class="headerlink" title="获取相应模块的环境实体类(since 1.4)："></a>获取相应模块的环境实体类(since 1.4)：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentBean appEnvironmentBean = EnvironmentSwitcher.getAppEnvironmentBean(this, BuildConfig.DEBUG);</span><br><span class="line">EnvironmentBean musicEnvironmentBean = EnvironmentSwitcher.getMusicEnvironmentBean(this, BuildConfig.DEBUG);</span><br><span class="line">EnvironmentBean newsEnvironmentBean = EnvironmentSwitcher.getNewsEnvironmentBean(this, BuildConfig.DEBUG);</span><br></pre></td></tr></table></figure><p>这里需要注意的是获取相应模块的地址需要两个参数。</p><p>第一个就是一个 Context 不用解释，因为 Environment Switcher 是用 SharedPreferences 进行存储数据的。</p><p>第二个参数是一个 boolean 型的值，如果为 true 表示当前为 Debug 或测试等内部使用版本，此时获取到的地址是我们手动切换保存的地址；而如果为 false 表示当前为要发布给用户使用的版本，此时获取到的地址为我们在 @Environment 中指定 isRelease = true 的地址，手动切换的环境地址不再生效。</p><h3 id="添加监听事件"><a href="#添加监听事件" class="headerlink" title="添加监听事件"></a>添加监听事件</h3><p>Environment Switcher 支持切换环境回调，你可以通过以下方法添加，需要注意的是不要忘记<strong>在不需要监听环境切换事件时移除监听事件</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity implements OnEnvironmentChangeListener&#123;</span><br><span class="line"></span><br><span class="line">    private static final String TAG = &quot;MainActivity&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        // 添加监听事件</span><br><span class="line">        EnvironmentSwitcher.addOnEnvironmentChangeListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onEnvironmentChanged(ModuleBean module, EnvironmentBean oldEnvironment, EnvironmentBean newEnvironment) &#123;</span><br><span class="line">        Log.e(TAG, module.getName() + &quot;由&quot; + oldEnvironment.getName() + &quot;环境，Url=&quot; + oldEnvironment.getUrl()</span><br><span class="line">                + &quot;,切换为&quot; + newEnvironment.getName() + &quot;环境，Url=&quot; + newEnvironment.getUrl());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        // 移除监听事件</span><br><span class="line">        EnvironmentSwitcher.removeOnEnvironmentChangeListener(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切换SDK开发环境"><a href="#切换SDK开发环境" class="headerlink" title="切换SDK开发环境"></a>切换SDK开发环境</h3><p>我们在项目中一般会依赖第三方提供的SDK，而且这些SDK也会提供测试环境，如果要在App内切换环境，使用上面的方法就不行了。那该怎么办呢？</p><p>例如我们的“直播”模块是引用的SDK，我们可以这样做：</p><ol><li><p>首先在 EnvironmentConfig.java 中配置”直播”模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class EnvironmentConfig &#123;</span><br><span class="line">     @Module(alias = &quot;直播&quot;)</span><br><span class="line">     private class Live &#123;</span><br><span class="line">         @Environment(url = &quot;online&quot;, isRelease = true, alias = &quot;正式&quot;)</span><br><span class="line">         private String online;</span><br><span class="line"></span><br><span class="line">         @Environment(url = &quot;test&quot;, alias = &quot;测试&quot;)</span><br><span class="line">         private String test;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>url 在这里只是用来区分环境，不用为真实的 url，但要保证同一模块中每个环境的 url 不同。</p></blockquote></li><li><p>在 Application 中添加监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">EnvironmentSwitcher.addOnEnvironmentChangeListener(new OnEnvironmentChangeListener() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void onEnvironmentChanged(ModuleBean module, EnvironmentBean oldEnvironment, EnvironmentBean newEnvironment) &#123;</span><br><span class="line">        if (module.equals(EnvironmentSwitcher.MODULE_LIVE)) &#123;</span><br><span class="line">            if (newEnvironment.equals(EnvironmentSwitcher.LIVE_ONLINE_ENVIRONMENT)) &#123;</span><br><span class="line">              // 调用 SDK 切换环境的方法，正式环境</span><br><span class="line">            &#125; else if (newEnvironment.equals(EnvironmentSwitcher.LIVE_TEST_ENVIRONMENT)) &#123;</span><br><span class="line">              // 调用 SDK 切换环境的方法，测试环境</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>利用 Environment Switcher 的环境切换回调，实现切换 SDK 环境。</p></blockquote></li></ol><p>好了，关于Environment Switcher 的介绍就到此为止吧，<a href="https://github.com/CodeXiaoMai/EnvironmentSwitcher" rel="external nofollow noopener noreferrer" target="_blank">更多使用介绍可参考Demo</a>，Demo 中有 Environment Switcher 结合 Retrofit 使用的详细实现过程。</p><p><img src="/images/environment_switcher/5275145-b3529a5f32884ab9.gif" alt="Environment Switcher"></p>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开源 </tag>
            
            <tag> EnvironmentSwitcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentModificationException 异常分析与解决方法</title>
      <link href="/posts/9041b2de.html"/>
      <url>/posts/9041b2de.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文主要从源码的角度分析 ConcurrentModificationException 发生的原因，以及解决办法。</p><a id="more"></a><h2 id="需求与实现"><a href="#需求与实现" class="headerlink" title="需求与实现"></a>需求与实现</h2><p><strong>需求</strong>：从一个集合中找出指定的元素并将其删除。</p><p><strong>问题代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.forEach(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (integer == <span class="number">5</span>) &#123;</span><br><span class="line">            list.remove(integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>异常堆栈</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList.forEach(ArrayList.java:<span class="number">1260</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="原因排查"><a href="#原因排查" class="headerlink" title="原因排查"></a>原因排查</h2><p>从异常的堆栈信息中可以看出，在 ArrayList 的 forEach() 方法中抛出异常，那就先看一下这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">final</span> E[] elementData = (E[]) <span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="keyword">this</span>.size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环体内代码执行需要满足的条件有两个：</span></span><br><span class="line">    <span class="comment">// 1. modCount == expectedModCount </span></span><br><span class="line">    <span class="comment">// 2. i &lt; size</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">        action.accept(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过对 forEach() 方法的源码分析，发现 modCount != expectedModCount 会导致 for 循环退出，并且抛出 ConcurrentModificationException。</p><p>从第 3 行代码 <code>final int expectedModCount = modCount</code> 中可以知道，初始状态 expectedModCount 和 modCount 的值是相等的，那么是什么原因导致它们的值不相等进而抛出异常的呢？</p><p>原因是 ArrayList 的修改操作（remove 或 add）会导致 modCount 的值发生变化。这里以 remove 方法为例进行分析证明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读完上面的源码会发现 remove 方法并没有修改 modCount 的值啊。别着急，再仔细观察会发现无论怎样，最终会执行 fastRemove 方法。再来看一下这个方法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 修改 modCount</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次没错了吧。</p><p>所以在 forEach() 方法中使用 ArrayList.remove() 删除元素会抛出异常的原因是：由于 ArrayList 执行 remove 方法后，modCount 的值加 1，当 forEach 中的循环检查两个条件时，会因 modCount == expectedModCount 不成立导致 for 循环退出，进而抛出 ConcurrentModificationException 异常。</p><p><strong><em>由此可见，forEach 循环只适用于对 ArrayList 的遍历，但是不可以对 ArrayList 进行添加或删除操作，否则将抛出异常</em></strong>。</p><p>现在问题的原因找到了，那么我们应该怎么解决呢？</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="方法一：使用普通的-for-循环"><a href="#方法一：使用普通的-for-循环" class="headerlink" title="方法一：使用普通的 for 循环"></a>方法一：使用普通的 for 循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        list.remove(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，发现没有抛出异常。问题解决！</p><p>但是，如果需求改为删除所有元素呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    list.remove(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size = list.size();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"执行完毕 list.size() = "</span> + size);</span><br></pre></td></tr></table></figure><p>先猜一下运行结果是什么，再往下看。</p><p>——– 这里是分隔线（这里先插播一条广告，广告之后更加精彩！哈哈！！！）————</p><blockquote><p>你还在为开发中频繁切换环境打包而烦恼吗？<br>快来试试 Environment Switcher 吧！<br>使用它可以在app运行时一键切换环境，而且还支持其他贴心小功能，有了它妈妈再也不用担心频繁环境切换了。<br><a href="https://github.com/CodeXiaoMai/EnvironmentSwitcher" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/CodeXiaoMai/EnvironmentSwitcher</a><br>目前该项目已经达成如下成就：<br><a href="https://github.com/CodeXiaoMai/EnvironmentSwitcher/stargazers" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/github/stars/CodeXiaoMai/EnvironmentSwitcher.svg" alt="GitHub stars"></a> <a href="https://github.com/CodeXiaoMai/EnvironmentSwitcher/network" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/github/forks/CodeXiaoMai/EnvironmentSwitcher.svg" alt="GitHub forks"></a> <a href="https://github.com/CodeXiaoMai/EnvironmentSwitcher/watchers" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/github/watchers/CodeXiaoMai/EnvironmentSwitcher.svg" alt="GitHub watchers"></a></p></blockquote><p>——————- 这里是分隔线（广告结束，精彩继续！！！）——————–</p><p>好了，回归正题你猜出结果了吗？看看你猜的对下对。</p><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行完毕 list.size() = 5</span><br></pre></td></tr></table></figure><p>咦？明明是遍历 list 的每个元素并把它们删除，为什么最后还有 5 个元素呢？</p><p>这是因为 ArrayList 内部使用数组存储数据，10 个元素依次存储在数组的第 0 个位置开始到第 9 个位置，当中间有一个元素删除时，后面的所有元素会向前移动，保证中间没有空余。所以当第 0 个位置的元素删除完毕后，本来在第 1 个位置的元素变成第 0 个元素，但由于 i++ 后 i = 1，下次执行删除操作时会删除最新的第 1 个位置的元素，而第 0 个位置的元素因被跳过而不会被删除，同理当后面的元素被删除时也会有跳过，这就是为什么最终会有 5 个元素的原因。</p><p>所以如果只是在遍历 ArrayList 的同时删除指定的元素后并退出循环，这样是没有问题的，因为删除元素后，不会进行其他操作。但是如果删除所有元素，就需要做一些特殊的处理了，具体处理如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    list.remove(i);</span><br><span class="line">    i--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：使用-Iterator"><a href="#方法二：使用-Iterator" class="headerlink" title="方法二：使用 Iterator"></a>方法二：使用 Iterator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (iterator.next() == <span class="number">5</span>) &#123;</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要删除所有元素呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    iterator.next();</span><br><span class="line">    iterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">执行完毕 list.size() = 0</span><br></pre></td></tr></table></figure><p>从运行结果可以知道，程序正常运行而且完全符合预期。为什么使用 Iterator 可以正常遍历并且删除所有元素呢？下面从源码的角度分析：</p><p>首先看，<code>list.iterator()</code> 的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法创建并返回一个 <code>Itr</code> 类的实例。通过查看源码可以发现 Itr 实现了 <code>Iterator</code> 接口，这不正是我们需要的吗？接下来依次看 iterator.hasNext()、iterator.next() 以及 iterator.remove() 方法：（前方高能，请注意准备好脑子！！！）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount; <span class="comment">// 因为 Itr 是 ArrayList 的内部类，所以可以直接访问 ArrayList 的 modCount。</span></span><br><span class="line"></span><br><span class="line">    Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果当前 cursor 不指向最后一个元素后面的索引位置，</span></span><br><span class="line">        <span class="comment">// 说明当前 cursor 所在位置后面还有没有遍历到的元素，返回 true。</span></span><br><span class="line">        <span class="keyword">return</span> cursor != size; <span class="comment">// 因为 Itr 是 ArrayList 的内部类，所以可以直接访问 ArrayList 的 size。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首先检查 modCount == expectedModCount 是否成立，</span></span><br><span class="line"><span class="comment">     * 如果不成立直接抛出 ConcurrentModificationException；</span></span><br><span class="line"><span class="comment">     * 否则按下面的逻辑运行：</span></span><br><span class="line"><span class="comment">     * 返回当前 cursor 所在位置的元素，</span></span><br><span class="line"><span class="comment">     * lastRet 的值更新为当前 cursor 的值，</span></span><br><span class="line"><span class="comment">     * cursor 的值加 1，即指向下次要访问的元素位置。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与直接使用 ArrayList 的 remove() 方法不同的是，</span></span><br><span class="line"><span class="comment">     * 该方法会更新 expectedModCount 的值为 modCount。</span></span><br><span class="line"><span class="comment">     * 这也正是为什么通过 List.iterator() 遍历的同时进行 </span></span><br><span class="line"><span class="comment">     * iterator().remove() 操作，不会发送异常的原因。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>使用 List.iterator() 遍历集合的同时进行 iterator().remove() 操作，不会发送异常的原因是：Iterator.remove() 会在执行 ArrayList 的 remove() 后，重新将 expectedModCount 的值更新为 modCount 的值。这样运行 checkForComodification() 方法时，才会正常运行。</p><h3 id="方法三：使用增强-for-循环"><a href="#方法三：使用增强-for-循环" class="headerlink" title="方法三：使用增强 for 循环"></a>方法三：使用增强 for 循环</h3><p>增强 for 循环是迭代器的简化书写格式，和 iterator 遍历的效果是一样的，也就说增强 for 循环的内部也就是调用 iterator 实现的，只不过获取迭代器由 jvm 完成，不需要我们获取迭代器而已。但是增强 for 循环有些缺点，例如不能在增强 for 循环里动态的删除集合内容（虽然内部也使用了 Iterator 但在删除时因为拿不到 Iterator，所以不能通过 Iterator 删除）、不能获取下标等。</p><p>所以这种方式只适用于删除一个指定元素后，立即退出循环的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Integer integer : list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (integer == <span class="number">5</span>) &#123;</span><br><span class="line">        list.remove(integer);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过上面对异常发生的原因以及 3 种解决办法的分析，可以得出以下结论：</p><p>只要是在遍历时直接通过调用 ArrayList.remove() 移除元素都是不安全的，普通的 for 循环和增强 for 循环适用于删除一个元素后就退出循环体；而 forEach() 循环是坚决不可以执行删除操作的（因为它是程序员无法控制退出循环的），否则会抛出异常。最安全的方法是使用 Iterator 进行遍历的同时，并且必须使用 Iterator 提供的 remove() 方法进行删除操作。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>上面分析是 remove() 操作，那 add() 操作呢？</p><p>按照思路应该也是使用 Iterator 的 add 之类的方法，但是当我们写代码的时候会发现，唉？唉？唉？唉？我 iterator 点，iterator 点…… 为什么没有点出来 add 之类的方法？</p><p>这是因为 Iterator 接口只提供了 remove() 方法，F***K，这可让我如何是好？别急，List 接口还提供了一个 listIterator() 方法，这个方法返回的对象是可以进行 add 操作的，我们来看一看下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 list 中的值为 0,2,4,6,8</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">    list.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ListIterator&lt;Integer&gt; iterator = list.listIterator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在每个元素后面追加一个比自己大 1 的元素</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Integer next = iterator.next();</span><br><span class="line">    iterator.add(next + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Integer integer : list) &#123;</span><br><span class="line">    System.out.print(integer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0123456789</span><br></pre></td></tr></table></figure><p>通过查看源码，可以发现 <code>list.listIterator()</code> 方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法返回一个 ListItr 类的实例，并且这个类实现了 ListIterator 接口。</p><p>ListIterator 是一个在继承了 Iterator 接口的同时又额外提供了 add() 、set() 等方法的接口，如下图。 </p><p><img src="/images/15639694328079/ListIterator.png" alt="ListIterator"></p><p>再看一下 ListItr 这个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同 Itr 的 remove 方法一样，先在集合中添加元素，</span></span><br><span class="line"><span class="comment">     * 最后将 modCount 的值赋给 expectedModCount</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.add(i, e);</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ListItr 不但实现了 ListIterator 接口，而且继承了 Itr 类（上面已经分析过），从源码中可以发现 ListItr 内没有实现 remove() 方法，显然这是直接复用它的父类 Itr 的 remove() 方法。</p><p>所以，如果在遍历的同时只是进行 remove 操作，既可以使用 iterator 也可以使用 listIterator；而要进行 add 操作，就必须使用 listIterator 了。</p><p>LinkedList 和 ArrayList 略有不同，虽然它的 iterator() 和 listIterator() 方法返回的接口类型不同，但是仔细分析源码会发现其实内部都是 ListItr 对象。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集合 </tag>
            
            <tag> ConcurrentModificationException </tag>
            
            <tag> ArrayList </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
